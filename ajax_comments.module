<?php

/**
 * @file
 * AJAX comments module file.
 */

use Drupal\comment\CommentInterface;
use Drupal\node\NodeInterface;

/**
 * Implements hook_comment_links_alter().
 */
function ajax_comments_comment_links_alter(array &$links, CommentInterface &$entity, array &$context) {
  //global $user;
  // Check
  if (_ajax_comments_bundle_active($entity->getCommentedEntity()->bundle())) {
    // A little HACK for do not mark as NEW own comments
    /*if (isset($build['#comment']->new) && $build['#comment']->uid == $user->uid && ($build['#comment']->new == MARK_NEW || $build['#comment']->new == MARK_UPDATED)) {
      $build['#comment']->new = MARK_READ;
    }*/

    // Delete.
    if (isset($links['comment']['#links']['comment-delete'])) {
      $classes = array('use-ajax-comments', 'ajax-comments-delete', 'ajax-comments-delete-' . $entity->id());
      if (empty($links['comment']['#links']['comment-delete']['attributes']['class'])) {
        $links['comment']['#links']['comment-delete']['attributes']['class'] = $classes;
      }
      else {
        $links['comment']['#links']['comment-delete']['attributes']['class'] = array_unique(array_merge($links['comment']['#links']['comment-delete']['attributes']['class'], $classes));
      }
    }

    // Edit.
    if (isset($links['comment']['#links']['comment-edit'])) {
      $classes = array('use-ajax-comments', 'ajax-comments-edit', 'ajax-comments-edit-' . $entity->id());
      if (empty($links['comment']['#links']['comment-edit']['attributes']['class'])) {
        $links['comment']['#links']['comment-edit']['attributes']['class'] = $classes;
      }
      else {
        $links['comment']['#links']['comment-edit']['attributes']['class'] = array_unique(array_merge($links['comment']['#links']['comment-edit']['attributes']['class'], $classes));
      }
    }

    // Reply.
    if (isset($links['comment']['#links']['comment-reply'])) {
      $classes = array('use-ajax-comments', 'ajax-comments-reply', 'ajax-comments-reply-' . $entity->getCommentedEntityId() . '-' . $entity->getFieldName() . '-' . $entity->id());
      if (empty($links['comment']['#links']['comment-reply']['attributes']['class'])) {
        $links['comment']['#links']['comment-reply']['attributes']['class'] = $classes;
      }
      else {
        $links['comment']['#links']['comment-reply']['attributes']['class'] = array_unique(array_merge($links['comment']['#links']['comment-reply']['attributes']['class'], $classes));
      }
    }
  }
}

/**
 * Implements hook_node_links_alter().
 */
function ajax_comments_node_links_alter(array &$node_links, NodeInterface $node, array &$context) {
  // Comment links are only added to node entity type for backwards
  // compatibility. Should you require comment links for other entity types you
  // can do so by implementing a new field formatter.
  $links = \Drupal::service('comment.link_builder')->buildCommentedEntityLinks($node, $context);
  foreach ($links as $link_name => $link) {
    $field_name = substr($link_name, strlen('comment__'));
    $classes = array('use-ajax-comments', 'ajax-comments-reply', 'ajax-comments-reply-' . $node->id() . '-' . $field_name . '-0');
    if (!empty($link['#links']['comment-add'])) {
      if (empty($link['#links']['comment-add']['attributes']['class'])) {
        $links[$link_name]['#links']['comment-add']['attributes']['class'] = $classes;
      }
      else {
        $links[$link_name]['comment-add']['attributes']['class'] = array_unique(array_merge($link['#links']['comment-add']['attributes']['class'], $classes));
      }
    }
  }
  $node_links += $links;
}

/**
 * Implements hook_entity_view_alter().
 */
function ajax_comments_entity_view_alter(array &$build, Drupal\Core\Entity\EntityInterface $entity, \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display) {
  if (_ajax_comments_bundle_active($entity->bundle())) {
    $build['#attached']['library'][] = 'ajax_comments/commands';
  }
}

/**
 * Implements hook_preprocess_node().
 *
 * AJAXify "Add new comment" link when there is no default form.
 */
/*function ajax_comments_preprocess_node(&$variables) {
  $node = $variables['node'];
  $view_mode = $variables['view_mode'];

  if (!ajax_comments_node_type_active($node->type)) {
    return;
  }

  if (variable_get('comment_form_location_' . $node->type, COMMENT_FORM_BELOW) == COMMENT_FORM_BELOW) {
    return;
  }

  if (empty($node->comment) || $node->comment == COMMENT_NODE_CLOSED) {
    return;
  }

  drupal_add_library('system', 'drupal.ajax');
  drupal_add_library('system', 'drupal.form');

  drupal_add_js(drupal_get_path('module', 'ajax_comments') .'/ajax_comments.js', 'file');

  $variables['content']['links']['comment']['#links']['comment-add']['attributes']['class'][] = 'use-ajax-comments';
  $variables['content']['links']['comment']['#links']['comment-add']['attributes']['class'][] = 'ajax-comments-reply-' . $node->nid . '-0';;
  $variables['content']['links']['comment']['#links']['comment-add']['fragment'] = NULL;
}*/

/**
 * Returns TRUE if this bundle has comment field and uses ajax comments
 */
function _ajax_comments_bundle_active($bundle_type) {
  // Get ajax comments enabled bundles
  $types = &drupal_static(__FUNCTION__);
  if (!isset($types)) {
    $types = array_filter(\Drupal::config('ajax_comments.settings')->get('ajax_comments_bundle_types'));
  }
  // Get list of bundles has comment field
  $has_comment_field = &drupal_static(__FUNCTION__);
  if (!isset($has_comment_field)) {
    $has_comment_field = array();
    $bundles = \Drupal::entityManager()->getFieldMap();
    foreach ($bundles as $bundle_name => $fields) {
      foreach ($fields as $field) {
        if ($field['type'] == 'comment') {
          foreach ($field['bundles'] as $bundle) {
            $has_comment_field[$bundle] = TRUE;
          }
        }
      }
    }
  }
  // Check status
  if ((empty($types) || !empty($types[$bundle_type])) && isset($has_comment_field[$bundle_type])) {
    return TRUE;
  }
  else {
    return FALSE;
  }
}
